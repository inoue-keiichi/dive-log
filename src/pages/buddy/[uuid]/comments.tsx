import Head from "next/head";
import styles from "@/styles/Home.module.css";
import BuddyCommentForm from "@/components/templates/BuddyCommentForm";
import { BuddyComment } from "@/schemas/buudy";
import { useRouter } from "next/router";
import { GetServerSidePropsContext } from "next";
import List from "@mui/material/List";
import { Divider, ListItem, ListItemText } from "@mui/material";
import { useState } from "react";

type Props = {
  buddyComments: (BuddyComment & {
    id: number;
    createdAt: Date;
  })[];
};

function BuddyComment(props: Props) {
  const [buddyComments, setBuddyComments] = useState(props.buddyComments);

  const router = useRouter();
  const uuid = router.query.uuid;

  const handleSubmit = async (data: BuddyComment) => {
    const res = await fetch(
      `${process.env.NEXT_PUBLIC_HOST}/api/buddy/${uuid}/comments/new`,
      {
        method: "POST",
        body: JSON.stringify({ ...data }),
      }
    );

    if (!res.ok) {
      // TODO: エラー処理かく
      throw Error("");
    }

    // 追加したコメントを表示できるようにコメントを再取得する
    const resComments = await fetch(
      `${process.env.NEXT_PUBLIC_HOST}/api/buddy/${uuid}/comments`
    );
    const body = (await resComments.json()) as (BuddyComment & {
      id: number;
      createdAt: Date;
    })[];
    setBuddyComments(body);
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <BuddyCommentForm onSubmit={handleSubmit} />
        {buddyComments.length > 0 && (
          <List
            sx={{ width: "50%", bgcolor: "background.paper", borderRadius: 2 }}
          >
            {buddyComments.map((comment, index) => (
              <>
                <ListItem key={comment.id} alignItems="flex-start">
                  <ListItemText
                    primary={comment.text}
                    secondary={comment.name + " / " + comment.createdAt}
                  />
                </ListItem>
                {/* コメントの間にだけDividerが欲しい */}
                {index < buddyComments.length - 1 && <Divider />}
              </>
            ))}
          </List>
        )}
      </main>
    </>
  );
}

export async function getServerSideProps(context: GetServerSidePropsContext) {
  const uuid = context.resolvedUrl
    .replace("/buddy", "")
    .replace("/comments", "");
  const res = await fetch(
    `${process.env.NEXT_PUBLIC_HOST}/api/buddy/${uuid}/comments`
  );
  const buddyComments = (await res.json()) as (BuddyComment & {
    id: number;
    createdAt: Date;
  })[];
  return { props: { buddyComments } };
}

export default BuddyComment;
