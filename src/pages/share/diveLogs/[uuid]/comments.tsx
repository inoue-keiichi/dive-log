import BuddyCommentForm from "@/components/templates/BuddyCommentForm";
import { ShareDiveLog } from "@/pages/api/share/diveLogs/[uuid]";
import { BuddyComment } from "@/schemas/buudy";
import styles from "@/styles/Home.module.css";
import { ResponseError } from "@/utils/type";
import { GetServerSidePropsContext } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { useState } from "react";

type Props = {
  diveLog: ShareDiveLog;
};

function BuddyComment(props: Props) {
  const [diveLog, setDiveLog] = useState(props.diveLog);
  const [error, setError] = useState<ResponseError>();

  const router = useRouter();
  const uuid = router.query.uuid;

  const handleSubmit = async (data: BuddyComment) => {
    const res = await fetch(
      `${process.env.NEXT_PUBLIC_HOST}/api/share/diveLogs/${uuid}/buddies/${router.query.buddyId}/comments/new`,
      {
        method: "POST",
        body: JSON.stringify({ ...data }),
      }
    );
    if (!res.ok) {
      setError(await res.json());
      return;
    }

    // 自分や他ユーザーが追加したコメントを表示できるようにコメントを再取得する
    // コメントのポストに失敗しても他ユーザーがコメントしている可能性がある
    const resDiveLog = await fetch(
      `${process.env.NEXT_PUBLIC_HOST}/api/share/diveLogs/${uuid}`
    );
    if (!resDiveLog.ok) {
      setError(await res.json());
      return;
    }
    const diveLog = (await resDiveLog.json()) as ShareDiveLog;
    setDiveLog(diveLog);
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <BuddyCommentForm
          diveLog={diveLog}
          onSubmit={handleSubmit}
          error={error}
          commenter={router.query.buddyName as string}
        />
      </main>
    </>
  );
}

export async function getServerSideProps(context: GetServerSidePropsContext) {
  const uuid = context.resolvedUrl
    .replace("/share/diveLogs/", "")
    .replace(/\/comments(\?buddyId=\d+\&buddyName=.+)?$/, "");

  // /shere/${uuid}/commentsに直接URL指定した場合は名前を指定してないので名前入力画面にリダイレクトする
  if (!context.resolvedUrl.match(/\?buddyId=\d+\&buddyName=.+$/)) {
    return {
      redirect: {
        destination: `/share/diveLogs/${uuid}`,
        permanent: false,
      },
    };
  }

  const res = await fetch(
    `${process.env.NEXT_PUBLIC_HOST}/api/share/diveLogs/${uuid}`
  );
  const diveLog = (await res.json()) as ShareDiveLog;
  return { props: { diveLog } };
}

export default BuddyComment;
